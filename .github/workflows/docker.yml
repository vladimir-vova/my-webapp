name: Build, Push and Deploy

on:
  push:
    branches: [ main, master ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/my-webapp:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/my-webapp:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: success()  # –ó–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞

    steps:
    - name: Deploy to production server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "üöÄ Starting deployment to ${{ secrets.SERVER_IP }}..."
          
          # –õ–æ–≥–∏–Ω–∏–º—Å—è –≤ Docker Hub
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          
          # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          if docker ps -a --format '{{.Names}}' | grep -q 'my-webapp-container'; then
            echo "üõë Stopping existing container..."
            docker stop my-webapp-container
            docker rm my-webapp-container
          fi
          
          # Pull –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–∑–∞
          echo "üì¶ Pulling latest image..."
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/my-webapp:latest
          
          # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
          echo "üê≥ Starting new container..."
          docker run -d \
            --name my-webapp-container \
            -p 80:80 \
            --restart unless-stopped \
            ${{ secrets.DOCKERHUB_USERNAME }}/my-webapp:latest
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
          sleep 5
          if docker ps --filter "name=my-webapp-container" --format "{{.Status}}" | grep -q "Up"; then
            echo "‚úÖ Deployment completed successfully!"
            echo "üåê Application available at: http://${{ secrets.SERVER_IP }}"
          else
            echo "‚ùå Deployment failed!"
            docker logs my-webapp-container
            exit 1
          fi
          
          # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤
          docker image prune -af
          echo "üßπ Old images cleaned up"